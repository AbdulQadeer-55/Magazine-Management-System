name: Daily LeetCode Solutions

on:
  schedule:
    - cron: "0 */4 * * *"  # Runs every 4 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  solve-leetcode:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Create LeetCode Python files and solve problems
      run: |
        # Create a Python script to generate solutions
        cat > generate_solution.py << 'EOL'
        import random
        from datetime import datetime
        import os

        # Template for Python solution files
        SOLUTION_TEMPLATE = '''"""
        LeetCode Problem: {problem_name}
        Difficulty: {difficulty}
        Date: {date}
        
        Problem Description:
        {description}

        Example:
        {example}
        """


        class Solution:
            def {function_name}(self{params}):
                """
                {docstring}
                
                Time Complexity: {time_complexity}
                Space Complexity: {space_complexity}
                """
                {solution_code}


        # Test cases
        def test_{function_name}():
            solution = Solution()
            # Add test cases here
            {test_cases}

        if __name__ == "__main__":
            test_{function_name}()
        '''

        # List of sample LeetCode problems
        PROBLEMS = [
            {
                "name": "Two Sum",
                "difficulty": "Easy",
                "function": "twoSum",
                "params": ", nums: list[int], target: int",
                "description": "Given an array of integers nums and an integer target, return indices of the two numbers that add up to target.",
                "example": "Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]",
                "solution": "hash_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in hash_map:\n                return [hash_map[complement], i]\n            hash_map[num] = i\n        return []",
                "test": "assert solution.twoSum([2,7,11,15], 9) == [0,1]"
            },
            # Add more problem templates here
        ]

        def generate_solution():
            problem = random.choice(PROBLEMS)
            current_date = datetime.now().strftime("%Y-%m-%d")
            
            # Generate filename
            filename = f"leetcode_{problem['name'].lower().replace(' ', '_')}_{current_date}.py"
            
            # Fill template
            solution_content = SOLUTION_TEMPLATE.format(
                problem_name=problem['name'],
                difficulty=problem['difficulty'],
                date=current_date,
                description=problem['description'],
                example=problem['example'],
                function_name=problem['function'],
                params=problem['params'],
                docstring=problem['description'],
                time_complexity="O(n)",
                space_complexity="O(n)",
                solution_code=problem['solution'],
                test_cases=problem['test']
            )
            
            return filename, solution_content

        # Generate and save solution
        filename, content = generate_solution()
        with open(filename, 'w') as f:
            f.write(content)
        
        print(f"Generated: {filename}")
        EOL

        # Execute the script multiple times for different solutions
        for i in range(15):  # Generate 15 solutions
          python3 generate_solution.py
          
          # Stage the new file
          git add *.py
          git config --global user.name "AbdulQadeer-55"
          git config --global user.email "qadeermemon100@gmail.com"
          git commit -m "Add LeetCode solution for $(date '+%Y-%m-%d') - Commit $((i+1))/15"
          
          # Small delay to space out commits
          sleep 10

    - name: Push changes
      run: git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
